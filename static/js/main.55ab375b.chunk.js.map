{"version":3,"sources":["ScoreSquare.js","Matrix.js","GlobalAlign.js","FittingAlign.js","LocalAlign.js","Home.js","serviceWorker.js","index.js"],"names":["ScoreSquare","this","props","img","score","char1","char2","matrix","row","col","gap","mismatch","match","left","top","topleft","toString","Modal","trigger","class","Image","src","size","style","position","Header","Content","React","Component","UP","LEFT","TOPLEFT","Matrix","renderRow","rowIndex","char","pointers","shortS","longS","Grid","Row","Column","map","val","index","isNaN","source","console","log","up","i","length","JSON","stringify","split","state","Container","columns","celled","ORIGIN","Home","handleClick","result","algorithm","s1","document","getElementById","value","s2","parseInt","M","v","w","push","j","temp","max_val","Number","NEGATIVE_INFINITY","dir","globalAlign","fittingAlign","localAlign","p","setState","showMatrix","S1","S2","handleChange","checked","onChange","type","name","id","defaultChecked","for","min","max","Button","onClick","Boolean","window","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.55ab375b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Image, Modal } from 'semantic-ui-react';\r\n\r\nclass ScoreSquare extends React.Component {\r\n\r\n  render() {\r\n    const { img, score, char1, char2, matrix, row, col, gap, mismatch, match } = this.props;\r\n    var left = \"N/A\";\r\n    var top = \"N/A\";\r\n    var topleft = \"N/A\";\r\n\r\n    if ( row > 0 && col > 0 ) {\r\n      if ( char1 === char2 ) { //match\r\n        topleft = (matrix[row - 1][col - 1]).toString() + \" + \" + match.toString() + \" = \" + (matrix[row - 1][col - 1] + match).toString() + \" (Due to match)\";\r\n      }\r\n      else {\r\n        topleft = (matrix[row - 1][col - 1]).toString() + \" + \" + mismatch.toString() + \" = \" + (matrix[row - 1][col - 1] + mismatch).toString() + \" (Due to mismatch)\";\r\n      }\r\n    }\r\n\r\n    if ( row > 0 ) {\r\n      top = (matrix[row - 1][col]).toString() + \" + \" + gap.toString() + \" = \" + (matrix[row - 1][col] + gap).toString() + \" (Gap score)\";\r\n    }\r\n\r\n    if ( col > 0 ) {\r\n      left = (matrix[row][col - 1]).toString() + \" + \" + gap.toString() + \" = \" + (matrix[row ][col - 1] + gap).toString() + \" (Gap score)\";\r\n    }\r\n    return (\r\n      <Modal trigger={\r\n          <div class=\"scoreSquare\">\r\n              <Image src={img} size='small' />\r\n              <p style={{position: 'absolute', top: '50%', left: '50%'}}> {score} </p>\r\n          </div> }>\r\n        <Modal.Header>Score Calculation</Modal.Header>\r\n        <Modal.Content>\r\n          <h3>Top left:</h3>\r\n          <p>{topleft}</p>\r\n          <h3>Top:</h3>\r\n          <p>{top}</p>\r\n          <h3>Left:</h3>\r\n          <p>{left}</p>\r\n          <h3>Max score: {score}</h3>\r\n        </Modal.Content>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\nexport default ScoreSquare;\r\n","import React from 'react';\r\nimport { Grid, Container, Image, Modal, Header } from 'semantic-ui-react';\r\nimport ScoreSquare from './ScoreSquare';\r\nconst UP = [-1,0]\r\nconst LEFT = [0, -1]\r\nconst TOPLEFT = [-1, -1]\r\nconst ORIGIN = [0, 0]\r\n\r\nclass Matrix extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            matrix: [[1, 2, 3], [4, 5, 6], [7, 8, 9]],\r\n            pointers: [[0, 0, 0], [0, 0, 0], [0, 0, 0]]\r\n        }\r\n    }\r\n    renderRow = (row, rowIndex, char, pointers) => {\r\n      const { shortS, longS, matrix, match, mismatch, gap } = this.props;\r\n      return (\r\n        <Grid.Row>\r\n        <Grid.Column>\r\n          <p> {char} </p>\r\n        </Grid.Column>\r\n        {row.map((val, index) => {\r\n            // If this element is a character, just show character\r\n            if (isNaN(val)) {\r\n                return (\r\n                  <Grid.Column>\r\n                    <p> {val} </p>\r\n                  </Grid.Column>\r\n                )\r\n            }\r\n            // If this element is an integer, display arrows\r\n            else {\r\n                var source;\r\n                console.log(pointers[rowIndex][index]);\r\n                var up, left, topleft = false;\r\n                // Identify all of this cell's pointers\r\n                for (var i = 0; i < pointers[rowIndex][index].length; i++) {\r\n                    if (JSON.stringify(pointers[rowIndex][index][i]) == JSON.stringify(UP)) {\r\n                        up = true;\r\n                    }\r\n                    else if (JSON.stringify(pointers[rowIndex][index][i]) == JSON.stringify(LEFT)) {\r\n                        left = true;\r\n                    }\r\n                    else if (JSON.stringify(pointers[rowIndex][index][i]) == JSON.stringify(TOPLEFT)) {\r\n                        topleft = true;\r\n                    }\r\n                }\r\n\r\n                // Display appropriate arrows according to pointers\r\n                if (up && left && topleft) {\r\n                    source = \"arrows/UP_LEFT_TOPLEFT.png\";\r\n                }\r\n                else if (up && left) {\r\n                    source = \"arrows/UP_LEFT.png\";\r\n                }\r\n                else if (up && topleft) {\r\n                    source = \"arrows/UP_TOPLEFT.png\";\r\n                }\r\n                else if (left && topleft) {\r\n                    source = \"arrows/LEFT_TOPLEFT.png\";\r\n                }\r\n                else if (up) {\r\n                    source = \"arrows/UP.png\";\r\n                }\r\n                else if (left) {\r\n                    source = \"arrows/LEFT.png\";\r\n                }\r\n                else if (topleft) {\r\n                    source = \"arrows/TOPLEFT.png\";\r\n                }\r\n                return (\r\n                  <Grid.Column>\r\n                    <ScoreSquare img={source} score={val} row={rowIndex} col={index} mismatch={mismatch} gap={gap} match={match} char1={ shortS.split('')[rowIndex] } char2={ longS.split('')[index]} matrix={matrix}/>\r\n                  </Grid.Column>\r\n                )\r\n            }\r\n          })\r\n        }\r\n        </Grid.Row>\r\n      );\r\n    }\r\n    render() {\r\n        const { matrix, pointers, shortS, longS } = this.props;\r\n        return (\r\n          <Container>\r\n            <Grid columns={matrix[0].length + 1} celled>\r\n              {this.renderRow(longS.split(''), 0, ' ', pointers)}\r\n              {matrix.map((row, index) => {\r\n                  return (\r\n                    this.renderRow(row, index, shortS[index], pointers)\r\n                  )\r\n              })}\r\n            </Grid>\r\n          </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Matrix;\r\n","const UP = [-1,0]\r\nconst LEFT = [0, -1]\r\nconst TOPLEFT = [-1, -1]\r\nconst ORIGIN = [0, 0]\r\n\r\nexport function globalAlign(v, w, match, mismatch, gap) {\r\n  //Initialize variables\r\n  var M = []\r\n  var pointers = []\r\n  for (var i = 0; i < v.length; i++) {\r\n    M.push([])\r\n    pointers.push([])\r\n    for (var j = 0; j < w.length; j++) {\r\n      M[i].push(0);\r\n      pointers[i].push([ORIGIN]);\r\n    }\r\n  }\r\n\r\n  //Construct Matrix M\r\n  for (var i = 0; i < v.length; i++) {\r\n    for (var j = 0; j < w.length; j++) {\r\n      var max_val = Number.NEGATIVE_INFINITY;\r\n      var dir = [ORIGIN];\r\n      if (i == 0 && j == 0) {\r\n        max_val = 0;\r\n        dir = [ORIGIN];\r\n      }\r\n\r\n      if (i > 0 && j > 0 && v[i] === w[j]) {\r\n        var temp = M[i - 1][j - 1] + match;\r\n        if (temp > max_val) {\r\n          max_val = temp;\r\n          dir = [TOPLEFT];\r\n        }\r\n        else if (temp == max_val) {\r\n            dir.push(TOPLEFT);\r\n        }\r\n      }\r\n\r\n      if (i > 0 && j > 0 && v[i] !== w[j]) {\r\n        var temp = M[i - 1][j - 1] + mismatch;\r\n        if (temp > max_val) {\r\n          max_val = temp;\r\n          dir = [TOPLEFT];\r\n        }\r\n        else if (temp == max_val) {\r\n            dir.push(TOPLEFT);\r\n        }\r\n      }\r\n\r\n      if (j > 0) {\r\n        var temp = M[i][j - 1] + gap\r\n        if (temp > max_val) {\r\n          max_val = temp;\r\n          dir = [LEFT];\r\n        }\r\n        else if (temp == max_val) {\r\n            dir.push(LEFT);\r\n        }\r\n      }\r\n\r\n      if (i > 0) {\r\n        var temp = M[i - 1][j] + gap\r\n        if (temp > max_val) {\r\n          max_val = temp;\r\n          dir = [UP];\r\n        }\r\n        else if (temp == max_val) {\r\n            dir.push(UP);\r\n        }\r\n      }\r\n      M[i][j] = max_val;\r\n      pointers[i][j] = dir;\r\n    }\r\n  }\r\n  \r\n  return [M, pointers]\r\n}\r\n","const UP = [-1,0]\r\nconst LEFT = [0, -1]\r\nconst TOPLEFT = [-1, -1]\r\nconst ORIGIN = [0, 0]\r\n\r\nexport function fittingAlign(v, w, match, mismatch, gap) {\r\n  //Initialize variables\r\n  var M = []\r\n  var pointers = []\r\n  for (var i = 0; i < v.length; i++) {\r\n    M.push([])\r\n    pointers.push([])\r\n    for (var j = 0; j < w.length; j++) {\r\n      M[i].push(0);\r\n      pointers[i].push([ORIGIN]);\r\n    }\r\n  }\r\n\r\n  //Construct Matrix M\r\n  for (var i = 0; i < v.length; i++) {\r\n    for (var j = 0; j < w.length; j++) {\r\n      var max_val = Number.NEGATIVE_INFINITY;\r\n      var dir = [ORIGIN];\r\n      if (i === 0) {\r\n        max_val = 0;\r\n        dir = [ORIGIN];\r\n      }\r\n\r\n      if (i > 0 && j > 0 && v[i] === w[j]) {\r\n        var temp = M[i - 1][j - 1] + match;\r\n        if (temp > max_val) {\r\n          max_val = temp;\r\n          dir = [TOPLEFT];\r\n        }\r\n        else if (temp == max_val) {\r\n            dir.push(TOPLEFT);\r\n        }\r\n      }\r\n\r\n      if (i > 0 && j > 0 && v[i] !== w[j]) {\r\n        var temp = M[i - 1][j - 1] + mismatch;\r\n        if (temp > max_val) {\r\n          max_val = temp;\r\n          dir = [TOPLEFT];\r\n        }\r\n        else if (temp == max_val) {\r\n            dir.push(TOPLEFT);\r\n        }\r\n      }\r\n\r\n      if (j > 0) {\r\n        var temp = M[i][j - 1] + gap\r\n        if (temp > max_val) {\r\n          max_val = temp;\r\n          dir = [LEFT];\r\n        }\r\n        else if (temp == max_val) {\r\n            dir.push(LEFT);\r\n        }\r\n      }\r\n\r\n      if (i > 0) {\r\n        var temp = M[i - 1][j] + gap\r\n        if (temp > max_val) {\r\n          max_val = temp;\r\n          dir = [UP];\r\n        }\r\n        else if (temp == max_val) {\r\n            dir.push(UP);\r\n        }\r\n      }\r\n      M[i][j] = max_val;\r\n      pointers[i][j] = dir;\r\n    }\r\n  }\r\n  \r\n  return [M, pointers]\r\n}\r\n","const UP = [-1,0]\r\nconst LEFT = [0, -1]\r\nconst TOPLEFT = [-1, -1]\r\nconst ORIGIN = [0, 0]\r\n\r\nexport function localAlign(v, w, match, mismatch, gap) {\r\n  //Initialize variables\r\n  var M = []\r\n  var pointers = []\r\n  for (var i = 0; i < v.length; i++) {\r\n    M.push([])\r\n    pointers.push([])\r\n    for (var j = 0; j < w.length; j++) {\r\n      M[i].push(0);\r\n      pointers[i].push([ORIGIN]);\r\n    }\r\n  }\r\n\r\n  //Construct Matrix M\r\n  for (var i = 0; i < v.length; i++) {\r\n    for (var j = 0; j < w.length; j++) {\r\n      var max_val = 0;\r\n      var dir = [ORIGIN];\r\n\r\n      if (i > 0 && j > 0 && v[i] === w[j]) {\r\n        var temp = M[i - 1][j - 1] + match;\r\n        if (temp > max_val) {\r\n          max_val = temp;\r\n          dir = [TOPLEFT];\r\n        }\r\n        else if (temp == max_val) {\r\n            dir.push(TOPLEFT);\r\n        }\r\n      }\r\n\r\n      if (i > 0 && j > 0 && v[i] !== w[j]) {\r\n        var temp = M[i - 1][j - 1] + mismatch;\r\n        if (temp > max_val) {\r\n          max_val = temp;\r\n          dir = [TOPLEFT];\r\n        }\r\n        else if (temp == max_val) {\r\n            dir.push(TOPLEFT);\r\n        }\r\n      }\r\n\r\n      if (j > 0) {\r\n        var temp = M[i][j - 1] + gap\r\n        if (temp > max_val) {\r\n          max_val = temp;\r\n          dir = [LEFT];\r\n        }\r\n        else if (temp == max_val) {\r\n            dir.push(LEFT);\r\n        }\r\n      }\r\n\r\n      if (i > 0) {\r\n        var temp = M[i - 1][j] + gap\r\n        if (temp > max_val) {\r\n          max_val = temp;\r\n          dir = [UP];\r\n        }\r\n        else if (temp == max_val) {\r\n            dir.push(UP);\r\n        }\r\n      }\r\n      M[i][j] = max_val;\r\n      pointers[i][j] = dir;\r\n    }\r\n  }\r\n\r\n  return [M, pointers]\r\n}\r\n","import React from 'react';\r\nimport Matrix from './Matrix';\r\nimport { Button } from 'semantic-ui-react';\r\nimport { globalAlign } from './GlobalAlign.js';\r\nimport { fittingAlign } from './FittingAlign.js';\r\nimport { localAlign } from './LocalAlign.js';\r\nclass Home extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n          matrix: [[]],\r\n          pointers: [[]],\r\n          S1: '',\r\n          S2: '',\r\n          match: 0,\r\n          mismatch: 0,\r\n          gap: 0,\r\n          showMatrix: false,\r\n          algorithm: 'global'\r\n        }\r\n    }\r\n\r\n    handleClick = () => {\r\n      const { algorithm } = this.state;\r\n      var s1 = '-' + document.getElementById('input_s1').value;\r\n      var s2 = '-' + document.getElementById('input_s2').value;\r\n      var match = parseInt(document.getElementById('input_match').value);\r\n      var mismatch = parseInt(document.getElementById('input_mismatch').value);\r\n      var gap = parseInt(document.getElementById('input_gap').value);\r\n      var result;\r\n      if (algorithm === 'global') {\r\n        result = globalAlign(s1, s2, match, mismatch, gap);\r\n      }\r\n      else if (algorithm === 'fitting') {\r\n        result = fittingAlign(s1, s2, match, mismatch, gap);\r\n      }\r\n      else {\r\n        result = localAlign(s1, s2, match, mismatch, gap);\r\n      }\r\n      var M = result[0];\r\n      var p = result[1];\r\n      this.setState({matrix: M, pointers: p, showMatrix: true, S1: s1, S2: s2, match, mismatch, gap});\r\n    }\r\n\r\n    handleChange = () => {\r\n      if (document.getElementById('btn_fitting').checked) {\r\n          this.setState({algorithm: 'fitting'});\r\n      }\r\n      else if (document.getElementById('btn_local').checked) {\r\n          this.setState({algorithm: 'local'});\r\n      }\r\n      else {\r\n        this.setState({algorithm: 'global'});\r\n      }\r\n    }\r\n\r\n    render() {\r\n        const { matrix, pointers, S1, S2, showMatrix, match, mismatch, gap } = this.state;\r\n        return (\r\n          <div>\r\n            <h1> Sequence Aligner </h1>\r\n            <form>\r\n              <fieldset>\r\n                <legend>Select Alignment Algorithm</legend>\r\n                <p>\r\n                  <input onChange={this.handleChange} type=\"radio\" name=\"algorithm\" id=\"btn_global\" value=\"global\" defaultChecked/>\r\n                  <label for=\"btn_global\" class=\"algorithm_select\">Global</label>\r\n                </p>\r\n                <p>\r\n                  <input onChange={this.handleChange} type=\"radio\" name=\"algorithm\" id=\"btn_fitting\" value=\"fitting\"/>\r\n                  <label for=\"btn_fitting\" class=\"algorithm_select\">Fitting</label>\r\n                </p>\r\n                <p>\r\n                  <input onChange={this.handleChange} type=\"radio\" name=\"algorithm\" id=\"btn_local\" value=\"local\"/>\r\n                  <label for=\"btn_local\">Local</label>\r\n                </p>\r\n              </fieldset>\r\n              <fieldset>\r\n                <legend>Enter Sequences</legend>\r\n                <p>\r\n                  <label for=\"input_s1\">Sequence 1</label>\r\n                  <input type=\"text\" id=\"input_s1\"/>\r\n                </p>\r\n                <p>\r\n                  <label for=\"input_s2\">Sequence 2</label>\r\n                  <input type=\"text\" id=\"input_s2\"/>\r\n                </p>\r\n              </fieldset>\r\n              <fieldset>\r\n                <legend>Enter Scoring Function</legend>\r\n                  <label for=\"input_match\">Match</label>\r\n                  <input class=\"score_input\" type=\"number\" id=\"input_match\" min={0}/>\r\n                  <label for=\"input_mismatch\">Mismatch</label>\r\n                  <input class=\"score_input\" type=\"number\" id=\"input_mismatch\" max={0}/>\r\n                  <label for=\"input_gap\">Gap</label>\r\n                  <input class=\"score_input\" type=\"number\" id=\"input_gap\" max={0}/>\r\n              </fieldset>\r\n            </form>\r\n            <div class=\"display\">\r\n              <Button id=\"btn_compute\" onClick={this.handleClick}>Compute Alignment</Button>\r\n              { showMatrix &&\r\n                <Matrix matrix={matrix} pointers={pointers} match={match} mismatch={mismatch} gap={gap} longS={S1.length >= S2.length ? S1 : S2} shortS={S1.length < S2.length ? S1 : S2}/>\r\n              }\r\n            </div>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from './Home';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Home />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}